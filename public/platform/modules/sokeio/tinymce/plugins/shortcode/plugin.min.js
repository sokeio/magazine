tinymce.PluginManager.add("shortcode", function (editor, url) {
  function highlightShortcodes(content) {
    var openingTag = '<span class="shortcode-highlight">';
    var closingTag = "</span>";
    content = removeHighlightShortcodes(content);
    var highlightedContent = content.replace(
      /\[(\/?[^\]]+)\]/g,
      function (match, shortcode) {
        if (shortcode.startsWith("/")) {
          return "[" + shortcode + "]" + closingTag;
        } else if (shortcode.endsWith("/")) {
          return openingTag + "[" + shortcode + "]" + closingTag;
        } else {
          return openingTag + "[" + shortcode + "]";
        }
      }
    );

    return highlightedContent;
  }
  const shortcodeEvent = (ev) => {
    let shortcodeObj = window.getShortcodeObjectFromText(ev.target.innerHTML);
    if (shortcodeObj) {
      if (window.openShortcodeSetting) {
        window.openShortcodeSetting(
          editor.editorContainer,
          shortcodeObj.shortcode,
          shortcodeObj.attributes,
          shortcodeObj.content,
          function ($content) {
            if ($content === "") {
              ev.target.remove();
              ev.target.closest(".shortcode-highlight")?.remove();
            } else {
              ev.target.innerHTML = $content;
            }
            editor.undoManager.dispatchChange();
          }
        );
      }
    }
  };
  function removeHighlightShortcodes(content) {
    return content.replace(
      /<span class="shortcode-highlight">(.*?)<\/span>/g,
      "$1"
    );
  }
  window.removeHighlightShortcodes = removeHighlightShortcodes;
  var regexTags = /(<([^>]+)>)/gi;
  var regexShortcodes =
    /\[([\w-:]+)((?:\s+\w+\s*=\s*"[^"]*")*)(\](.*?)\[\/\1\]|\s*\/\])/s;
  // var regexShortcodes = /\[([\w-:]+)((?:\s+\w+\s*=\s*"[^"]*")*)(\](.*?)\[\/\1\]|\s*\xA0\/\])/s;
  const highlightedContentHander = () => {
    editor.dom.select("*").forEach(function ($item) {
      if (
        !regexShortcodes.test($item.innerText) &&
        $item.classList.contains("shortcode-highlight")
      ) {
        [...$item.childNodes].forEach(function (_item) {
          $item.parentNode.insertBefore(_item, $item);
        });
        $item.parentNode.removeChild($item);
      }
      if (
        !regexTags.test($item.innerHTML) &&
        regexShortcodes.test($item.innerText) &&
        !$item.classList.contains("shortcode-highlight") &&
        !$item.closest(".shortcode-highlight")
      ) {
        $item.innerHTML = highlightShortcodes($item.innerHTML);
        $item.querySelectorAll(".shortcode-highlight").forEach(function (el) {
          el.addEventListener("click", shortcodeEvent);
        });
      }
    });
  };
  // Apply highlighting to the initial content
  editor.on("init", function () {
    editor.dom.addStyle(
      ".shortcode-highlight {    display: inline-block;margin-bottom: 2px;  padding: 5px;  background-color: antiquewhite;  border: 1px solid #FF7A59;   border-radius: 2px;}  .shortcode-highlight:hover { background-color: #EAF0F6;  cursor: pointer;}"
    );
    highlightedContentHander();
  });

  // Exclude highlighting when saving the content
  editor.on("SaveContent", function (e) {
    var content = e.content;

    // Remove the highlighting spans from the content
    var cleanedContent = removeHighlightShortcodes(content);

    // Update the saved content without the highlighting
    e.content = cleanedContent;
  });
  var openDialog = function () {
    if (window.openShortcodeSetting) {
      window.openShortcodeSetting(
        editor.editorContainer,
        "",
        [],
        "",
        function ($content) {
          editor.insertContent($content);
          highlightedContentHander();
        }
      );
    }
  };
  /* Add a button that opens a window */
  editor.ui.registry.addButton("shortcode", {
    text: "Shortcode",
    onAction: function () {
      /* Open window */
      openDialog();
    },
  });
  /* Adds a menu item, which can then be included in any menu via the menu/menubar configuration */
  editor.ui.registry.addMenuItem("shortcode", {
    text: "Shortcode",
    onAction: function () {
      /* Open window */
      openDialog();
    },
  });
  let editorChangeHandlerId = null;
  editor.on("Paste Change input Undo Redo", function () {
    clearTimeout(editorChangeHandlerId);
    editorChangeHandlerId = setTimeout(function () {
      highlightedContentHander();
    }, 10);
  });
  /* Return the metadata for the help plugin */
  return {
    getMetadata: function () {
      return {
        name: "Shortcode",
        url: "http://hau.xyz",
      };
    },
  };
});
